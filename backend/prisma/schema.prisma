generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int              @id @default(autoincrement())
  name                   String           @db.VarChar(100)
  email                  String           @unique
  password               String
  role                   Role             @default(USER)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  avatar                 String?
  emailVerificationToken String?
  isEmailVerified        Boolean          @default(false)
  phone                  String?
  resetPasswordExpires   DateTime?
  resetPasswordToken     String?
  clerkId                String?          @unique
  stripeCustomerId       String?          @unique
  addresses              Address[]
  cartItems              CartItem[]
  orders                 Order[]
  paymentMethods         PaymentMethod[]
  questions              Question[]
  questionReplies        QuestionReply[]
  recentlyViewed         RecentlyViewed[]
  reviewReplies          ReviewReply[]
  reviews                Review[]
  reviewInteractions     ReviewInteraction[]
  preferences            UserPreferences?
  profile                UserProfile?
  sessions               UserSession[]
  wishlist               WishlistItem[]

  @@map("users")
}

model Address {
  id            Int         @id @default(autoincrement())
  userId        Int
  type          AddressType @default(SHIPPING)
  firstName     String      @db.VarChar(50)
  lastName      String      @db.VarChar(50)
  company       String?
  address1      String      @db.VarChar(200)
  address2      String?
  city          String      @db.VarChar(100)
  state         String      @db.VarChar(100)
  postalCode    String      @db.VarChar(20)
  country       String      @db.VarChar(100)
  phone         String      @db.VarChar(20)
  isDefault     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders Order[]     @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(200)
  description      String
  price            Decimal          @db.Decimal(10, 2)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  barcode          String?          @db.VarChar(100)
  categoryId       Int
  comparePrice     Decimal?         @db.Decimal(10, 2)
  costPrice        Decimal?         @db.Decimal(10, 2)
  dimensions       String?          @db.VarChar(100)
  isActive         Boolean          @default(true)
  isFeatured       Boolean          @default(false)
  isOnSale         Boolean          @default(false)
  metaDescription  String?
  metaTitle        String?          @db.VarChar(200)
  saleEndDate      DateTime?
  salePrice        Decimal?         @db.Decimal(10, 2)
  shortDescription String?          @db.VarChar(500)
  sku              String?          @unique @db.VarChar(100)
  slug             String           @unique @db.VarChar(200)
  tags             String[]         @default([])
  weight           Decimal?         @db.Decimal(8, 2)
  lowStockThreshold Int             @default(5)
  allowBackorder   Boolean          @default(false)
  cartItems        CartItem[]
  orderItems       OrderItem[]
  images           ProductImage[]
  variants         ProductVariant[]
  category         Category         @relation(fields: [categoryId], references: [id])
  questions        Question[]
  recentlyViewed   RecentlyViewed[]
  reviews          Review[]
  wishlistItems    WishlistItem[]

  @@map("products")
}

model ProductVariant {
  id           Int         @id @default(autoincrement())
  productId    Int
  size         Size
  color        String      @db.VarChar(50)
  colorCode    String?     @db.VarChar(7)
  stock        Int         @default(0)
  sku          String?     @unique @db.VarChar(100)
  price        Decimal?    @db.Decimal(10, 2)
  comparePrice Decimal?    @db.Decimal(10, 2)
  costPrice    Decimal?    @db.Decimal(10, 2)  // NEW: Variant-specific cost for accurate profit calculation
  isActive     Boolean     @default(true)
  stockStatus  StockStatus @default(IN_STOCK)
  lowStockThreshold Int    @default(3)
  allowBackorder   Boolean @default(false)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  color     String?  @db.VarChar(50)  // New field for color-specific images
  url       String   @db.VarChar(500)
  alt       String?  @db.VarChar(200)
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        Int             @id @default(autoincrement())
  userId    Int
  productId Int
  variantId Int?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id                 Int            @id @default(autoincrement())
  orderNumber        String         @unique @db.VarChar(50)
  userId             Int
  status             OrderStatus    @default(PENDING)
  subtotal           Decimal        @db.Decimal(10, 2)
  tax                Decimal        @default(0) @db.Decimal(10, 2)
  shipping           Decimal        @default(0) @db.Decimal(10, 2)
  shippingMethod     String?        @db.VarChar(50)
  discount           Decimal        @default(0) @db.Decimal(10, 2)
  total              Decimal        @default(0) @db.Decimal(10, 2)
  currency           Currency       @default(USD)
  language           Language       @default(ENGLISH)
  notes              String?
  billingAddressId   Int?
  paymentStatus      PaymentStatus  @default(PENDING)
  trackingNumber     String?        @db.VarChar(100)
  shippedAt          DateTime?
  deliveredAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  paymentMethodId    Int?
  shippingAddress1   String?        @db.VarChar(200)
  shippingAddress2   String?        @db.VarChar(200)
  shippingCity       String?        @db.VarChar(100)
  shippingCompany    String?        @db.VarChar(100)
  shippingCountry    String?        @db.VarChar(100)
  shippingFirstName  String?        @db.VarChar(100)
  shippingLastName   String?        @db.VarChar(100)
  shippingPhone      String?        @db.VarChar(50)
  shippingPostalCode String?        @db.VarChar(20)
  shippingState      String?        @db.VarChar(100)
  currentStatus      OrderStatus    @default(PENDING)
  estimatedDelivery  DateTime?
  lastStatusUpdate   DateTime       @default(now())
  statusHistory      Json?
  
  // NEW SALES & ANALYTICS FIELDS
  profitMargin       Decimal?       @db.Decimal(10, 2)
  costOfGoods        Decimal?       @db.Decimal(10, 2)
  salesChannel       String?        @db.VarChar(50)  // "web", "mobile", "marketplace"
  referrer           String?        @db.VarChar(200)
  utmSource          String?        @db.VarChar(100)
  utmMedium          String?        @db.VarChar(100)
  utmCampaign        String?        @db.VarChar(100)
  returnStatus       ReturnStatus?  @default(NONE)
  returnReason       String?        @db.Text
  refundAmount       Decimal?       @db.Decimal(10, 2)
  refundReason       String?        @db.Text
  totalItems         Int            @default(0)
  averageItemValue   Decimal?       @db.Decimal(10, 2)
  
  items              OrderItem[]
  billingAddress     Address?       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  paymentMethod      PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  user               User           @relation(fields: [userId], references: [id])
  payments           Payment[]

  @@map("orders")
}

model OrderItem {
  id          Int             @id @default(autoincrement())
  orderId     Int
  productId   Int
  variantId   Int?
  productName String          @db.VarChar(200)
  productSku  String?         @db.VarChar(100)
  size        Size?
  color       String?         @db.VarChar(50)
  quantity    Int
  price       Decimal         @db.Decimal(10, 2)
  total       Decimal         @db.Decimal(10, 2)
  costPrice   Decimal?        @db.Decimal(10, 2)  // Cost at time of sale for accurate profit calculation
  createdAt   DateTime        @default(now())
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Payment {
  id              Int               @id @default(autoincrement())
  orderId         Int
  amount          Decimal           @db.Decimal(10, 2)
  currency        Currency          @default(USD)
  status          PaymentStatus     @default(PENDING)
  transactionId   String?           @db.VarChar(200)
  gatewayResponse String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  method          PaymentMethodType @default(CREDIT_CARD)
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id           Int                   @id @default(autoincrement())
  userId       Int
  productId    Int
  rating       Int
  title        String?
  comment      String?
  isVerified   Boolean               @default(false)
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  status       ReviewStatus          @default(PENDING)
  replies      ReviewReply[]
  interactions ReviewInteraction[]
  product      Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model ReviewReply {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int
  reply     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_replies")
}

model ReviewInteraction {
  id        Int                @id @default(autoincrement())
  reviewId  Int
  userId    Int
  type      InteractionType
  reason    String?            @db.Text  // Store report reason
  createdAt DateTime           @default(now())
  review    Review             @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId, type])
  @@map("review_interactions")
}

model Question {
  id        Int            @id @default(autoincrement())
  userId    Int
  productId Int
  question  String         @db.VarChar(500)
  answer    String?
  status    QuestionStatus @default(PENDING)
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  replies   QuestionReply[]

  @@map("questions")
}

model QuestionReply {
  id         Int      @id @default(autoincrement())
  questionId Int
  userId     Int
  reply      String   @db.VarChar(1000)
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("question_replies")
}

model DiscountCode {
  id          Int          @id @default(autoincrement())
  code        String       @unique @db.VarChar(50)
  type        DiscountType @default(PERCENTAGE)
  value       Decimal      @db.Decimal(10, 2)
  minAmount   Decimal?     @db.Decimal(10, 2)
  maxDiscount Decimal?     @db.Decimal(10, 2)
  usageLimit  Int?
  usedCount   Int          @default(0)
  isActive    Boolean      @default(true)
  startsAt    DateTime     @default(now())
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("discount_codes")
}

model RecentlyViewed {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  viewedAt  DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("recently_viewed")
}

model FlashSale {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(200)
  description        String?
  discountPercentage Int      @default(0)
  startDate          DateTime @default(now())
  endDate            DateTime
  isActive           Boolean  @default(true)
  isFeatured         Boolean  @default(false)
  bannerColor        String?  @db.VarChar(7)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("flash_sales")
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  dateOfBirth DateTime?
  gender      String?   @db.VarChar(20)
  bio         String?
  website     String?   @db.VarChar(200)
  socialLinks Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserPreferences {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  language           String   @default("en") @db.VarChar(10)
  currency           String   @default("USD") @db.VarChar(10)
  timezone           String?  @db.VarChar(50)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  marketingEmails    Boolean  @default(true)
  orderUpdates       Boolean  @default(true)
  promotionalOffers  Boolean  @default(true)
  newsletter         Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PaymentMethod {
  id             Int               @id @default(autoincrement())
  userId         Int
  type           PaymentMethodType @default(CREDIT_CARD)
  provider       String            @db.VarChar(50)
  accountNumber  String?           @db.VarChar(50)
  expiryMonth    Int?
  expiryYear     Int?
  cardholderName String?           @db.VarChar(100)
  isDefault      Boolean           @default(false)
  isActive       Boolean           @default(true)
  metadata       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  orders         Order[]
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique @db.VarChar(255)
  deviceInfo   String?  @db.VarChar(200)
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

model CurrencyConfig {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(10)  // e.g., "USD", "EUR", "JPY"
  name        String   @db.VarChar(100)         // e.g., "US Dollar", "Euro"
  symbol      String   @db.VarChar(10)          // e.g., "$", "€", "¥"
  rate        Decimal  @default(1) @db.Decimal(20, 6)  // Exchange rate relative to USD
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  decimals    Int      @default(2)              // Number of decimal places
  position    String   @default("before") @db.VarChar(10)  // "before" or "after"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("currency_configs")
}

model LanguageConfig {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(10)  // e.g., "en", "es", "fr"
  name        String   @db.VarChar(100)         // e.g., "English", "Español"
  nativeName  String   @db.VarChar(100)         // e.g., "English", "Español"
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  isRTL       Boolean  @default(false)          // Right-to-left language
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("language_configs")
}

model CountryConfig {
  id          Int      @id @default(autoincrement())
  code        String   @unique @db.VarChar(10)  // e.g., "US", "GB", "DE"
  name        String   @db.VarChar(100)         // e.g., "United States", "United Kingdom"
  flagEmoji   String   @db.VarChar(10)          // e.g., "🇺🇸", "🇬🇧", "🇩🇪"
  phoneCode   String?  @db.VarChar(10)          // e.g., "+1", "+44", "+49"
  isActive    Boolean  @default(true)
  isDefault   Boolean  @default(false)
  hasDelivery Boolean  @default(true)            // Whether we deliver to this country
  deliveryCost Decimal? @db.Decimal(10, 2)      // Delivery cost for this country
  deliveryDays Int?                              // Estimated delivery days
  sortOrder   Int      @default(0)               // For custom ordering
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("country_configs")
}

enum Role {
  USER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum StockStatus {
  IN_STOCK
  LOW_STOCK
  OUT_OF_STOCK
  BACKORDER
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CRYPTO
}

enum Currency {
  // Major World Currencies - Stripe supports 135+ currencies
  USD  // US Dollar
  EUR  // Euro
  GBP  // British Pound
  JPY  // Japanese Yen
  CNY  // Chinese Yuan
  INR  // Indian Rupee
  PKR  // Pakistani Rupee
  CAD  // Canadian Dollar
  AUD  // Australian Dollar
  CHF  // Swiss Franc
  SEK  // Swedish Krona
  NOK  // Norwegian Krone
  DKK  // Danish Krone
  PLN  // Polish Złoty
  CZK  // Czech Koruna
  HUF  // Hungarian Forint
  RUB  // Russian Ruble
  TRY  // Turkish Lira
  BRL  // Brazilian Real
  MXN  // Mexican Peso
  ARS  // Argentine Peso
  CLP  // Chilean Peso
  COP  // Colombian Peso
  PEN  // Peruvian Sol
  UYU  // Uruguayan Peso
  VND  // Vietnamese Dong
  THB  // Thai Baht
  MYR  // Malaysian Ringgit
  SGD  // Singapore Dollar
  HKD  // Hong Kong Dollar
  KRW  // South Korean Won
  TWD  // Taiwan Dollar
  PHP  // Philippine Peso
  IDR  // Indonesian Rupiah
  ZAR  // South African Rand
  EGP  // Egyptian Pound
  NGN  // Nigerian Naira
  KES  // Kenyan Shilling
  GHS  // Ghanaian Cedi
  MAD  // Moroccan Dirham
  TND  // Tunisian Dinar
  AED  // UAE Dirham
  SAR  // Saudi Riyal
  QAR  // Qatari Riyal
  KWD  // Kuwaiti Dinar
  BHD  // Bahraini Dinar
  OMR  // Omani Rial
  JOD  // Jordanian Dinar
  LBP  // Lebanese Pound
  ILS  // Israeli Shekel
  IRR  // Iranian Rial
  AFN  // Afghan Afghani
  BDT  // Bangladeshi Taka
  LKR  // Sri Lankan Rupee
  NPR  // Nepalese Rupee
  MMK  // Myanmar Kyat
  KHR  // Cambodian Riel
  LAK  // Lao Kip
  MNT  // Mongolian Tögrög
  KZT  // Kazakhstani Tenge
  UZS  // Uzbekistani Som
  TJS  // Tajikistani Somoni
  TMT  // Turkmenistani Manat
  AZN  // Azerbaijani Manat
  GEL  // Georgian Lari
  AMD  // Armenian Dram
  BYN  // Belarusian Ruble
  MDL  // Moldovan Leu
  UAH  // Ukrainian Hryvnia
  RON  // Romanian Leu
  BGN  // Bulgarian Lev
  HRK  // Croatian Kuna
  RSD  // Serbian Dinar
  MKD  // Macedonian Denar
  ALL  // Albanian Lek
  XCD  // East Caribbean Dollar
  BBD  // Barbadian Dollar
  JMD  // Jamaican Dollar
  TTD  // Trinidad and Tobago Dollar
  BZD  // Belize Dollar
  GTQ  // Guatemalan Quetzal
  HNL  // Honduran Lempira
  NIO  // Nicaraguan Córdoba
  CRC  // Costa Rican Colón
  PAB  // Panamanian Balboa
  BOB  // Bolivian Boliviano
  PYG  // Paraguayan Guaraní
  GYD  // Guyanese Dollar
  SRD  // Surinamese Dollar
  FJD  // Fijian Dollar
  PGK  // Papua New Guinean Kina
  WST  // Samoan Tālā
  TOP  // Tongan Paʻanga
  VUV  // Vanuatu Vatu
  SBD  // Solomon Islands Dollar
  KID  // Kiribati Dollar
  TVD  // Tuvaluan Dollar
  NZD  // New Zealand Dollar
  // Note: Stripe supports 135+ currencies. This enum covers the most common ones.
  // For full support, consider using a string field instead of enum.
}

enum Language {
  // Major World Languages - Covers 50+ languages
  ENGLISH     // English
  SPANISH     // Español
  FRENCH     // Français
  GERMAN     // Deutsch
  ITALIAN    // Italiano
  PORTUGUESE // Português
  RUSSIAN    // Русский
  CHINESE    // 中文
  JAPANESE   // 日本語
  KOREAN     // 한국어
  ARABIC     // العربية
  HINDI      // हिन्दी
  URDU       // اردو
  BENGALI    // বাংলা
  TAMIL      // தமிழ்
  TELUGU     // తెలుగు
  MARATHI    // मराठी
  GUJARATI   // ગુજરાતી
  KANNADA    // ಕನ್ನಡ
  MALAYALAM  // മലയാളം
  PUNJABI    // ਪੰਜਾਬੀ
  ORIYA      // ଓଡ଼ିଆ
  ASSAMESE   // অসমীয়া
  SINDHI     // سنڌي
  KASHMIRI   // कॉशुर
  NEPALI     // नेपाली
  SINHALA    // සිංහල
  THAI       // ไทย
  VIETNAMESE // Tiếng Việt
  INDONESIAN // Bahasa Indonesia
  MALAY      // Bahasa Melayu
  FILIPINO   // Filipino
  BURMESE    // မြန်မာ
  KHMER      // ខ្មែរ
  LAO        // ລາວ
  MONGOLIAN  // Монгол
  KAZAKH     // Қазақ
  UZBEK      // O'zbek
  TURKISH    // Türkçe
  AZERBAIJANI // Azərbaycan
  GEORGIAN   // ქართული
  ARMENIAN   // Հայերեն
  PERSIAN    // فارسی
  KURDISH    // کوردی
  HEBREW     // עברית
  GREEK      // Ελληνικά
  BULGARIAN  // Български
  MACEDONIAN // Македонски
  SERBIAN    // Српски
  CROATIAN   // Hrvatski
  SLOVENIAN  // Slovenščina
  SLOVAK     // Slovenčina
  CZECH      // Čeština
  POLISH     // Polski
  HUNGARIAN  // Magyar
  ROMANIAN   // Română
  ALBANIAN   // Shqip
  ESTONIAN   // Eesti
  LATVIAN    // Latviešu
  LITHUANIAN // Lietuvių
  FINNISH    // Suomi
  SWEDISH    // Svenska
  NORWEGIAN  // Norsk
  DANISH     // Dansk
  ICELANDIC  // Íslenska
  DUTCH      // Nederlands
  BELGIAN    // Vlaams
  LUXEMBOURGISH // Lëtzebuergesch
  SWISS_GERMAN // Schwiizertüütsch
  CATALAN    // Català
  BASQUE     // Euskara
  GALICIAN   // Galego
  WELSH      // Cymraeg
  SCOTTISH_GAELIC // Gàidhlig
  IRISH      // Gaeilge
  MANX       // Gaelg
  CORNISH    // Kernewek
  BRETON     // Brezhoneg
  OCCITAN    // Occitan
  PROVENCAL  // Provençau
  CORSICAN   // Corsu
  SARDINIAN  // Sardu
  SICILIAN   // Sicilianu
  NAPOLETANO // Napulitano
  VENETIAN   // Vèneto
  LOMBARD    // Lumbaart
  PIEDMONTESE // Piemontèis
  LIGURIAN   // Lìgure
  EMILIAN    // Emiliàn
  ROMAGNOL   // Rumagnòl
  TUSCAN     // Toscano
  UMBRIAN    // Umbro
  MARCHIGIANO // Marchigiano
  ABRUZZESE  // Abruzzese
  MOLISAN    // Molisano
  PUGLIESE   // Pugliese
  CALABRESE  // Calabrese
  // Note: This enum covers 50+ major world languages.
  // For full support, consider using a string field instead of enum.
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
  ANSWERED
}

enum InteractionType {
  HELPFUL
  REPORT
}

// Tax and Shipping Configuration Tables
model TaxRate {
  id          Int      @id @default(autoincrement())
  countryCode String   @db.VarChar(10)  // e.g., "US", "CA", "UK"
  countryName String   @db.VarChar(100) // e.g., "United States", "Canada", "United Kingdom"
  stateCode   String?  @db.VarChar(10)  // e.g., "CA", "TX", "NY" (optional)
  stateName   String?  @db.VarChar(100) // e.g., "California", "Texas", "New York" (optional)
  taxRate     Decimal  @db.Decimal(5, 2) // e.g., 7.25 for 7.25%
  taxName     String   @db.VarChar(100)  // e.g., "Sales Tax", "GST", "VAT"
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tax_rates")
}

model ShippingRate {
  id            Int      @id @default(autoincrement())
  countryCode   String   @db.VarChar(10)  // e.g., "US", "CA", "UK"
  countryName   String   @db.VarChar(100) // e.g., "United States", "Canada", "United Kingdom"
  stateCode     String?  @db.VarChar(10)  // e.g., "CA", "TX", "NY" (optional)
  stateName     String?  @db.VarChar(100) // e.g., "California", "Texas", "New York" (optional)
  shippingCost  Decimal  @db.Decimal(10, 2) // e.g., 5.00 for $5.00
  deliveryDays  Int      @default(3)      // e.g., 3 for 3-5 business days
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("shipping_rates")
}

// Delivery Scope Configuration
model DeliveryScope {
  id                    Int      @id @default(autoincrement())
  businessId            String   @unique @db.VarChar(100) // Unique identifier for the business
  businessName          String   @db.VarChar(200) // Business name
  hasInternationalDelivery Boolean @default(false) // Can ship internationally
  primaryCountryCode    String   @db.VarChar(10)  // Business's primary country
  primaryCountryName    String   @db.VarChar(100) // Business's primary country name
  primaryCurrency       String   @db.VarChar(10)  // Business's primary currency (e.g., USD, EUR, GBP)
  isActive              Boolean  @default(true)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  @@map("delivery_scopes")
}

// Local City/State Shipping Rates
model LocalShippingRate {
  id            Int      @id @default(autoincrement())
  businessId    String   @db.VarChar(100) // Reference to business
  cityName      String   @db.VarChar(100) // City name
  stateCode     String?  @db.VarChar(10)  // State/province code (optional)
  stateName     String?  @db.VarChar(100) // State/province name (optional)
  shippingCost  Decimal  @db.Decimal(10, 2) // Shipping cost for this city
  deliveryDays  Int      @default(1)      // Delivery days (usually 1-2 for local)
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("local_shipping_rates")
}

// Local Tax Rates
model LocalTaxRate {
  id            Int      @id @default(autoincrement())
  businessId    String   @db.VarChar(100) // Reference to business
  cityName      String?  @db.VarChar(100) // City name (optional, for city-specific rates)
  stateCode     String?  @db.VarChar(10)  // State/province code
  stateName     String?  @db.VarChar(100) // State/province name
  taxRate       Decimal  @db.Decimal(5, 2) // Tax rate percentage
  taxName       String   @db.VarChar(100)  // Tax name (e.g., "Sales Tax", "VAT")
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("local_tax_rates")
}

// Business Configuration
model BusinessConfig {
  id              Int      @id @default(autoincrement())
  businessId      String   @unique @db.VarChar(100) // Unique identifier for the business
  baseCurrency    String   @db.VarChar(10)          // Business base currency (e.g., PKR)
  businessName    String   @db.VarChar(200)         // Business name
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("business_configs")
}

// Exchange Rate Configuration
model ExchangeRate {
  id              Int      @id @default(autoincrement())
  fromCurrency    String   @db.VarChar(10)          // Base currency (e.g., PKR)
  toCurrency      String   @db.VarChar(10)          // Target currency (e.g., USD, EUR)
  rate            Decimal  @db.Decimal(10, 6)       // Exchange rate (e.g., 0.0036 for PKR→USD)
  isBase          Boolean  @default(false)          // True if this is the base currency rate
  isActive        Boolean  @default(true)
  lastUpdated     DateTime @default(now())
  source          String?  @db.VarChar(50)          // Rate source (e.g., "API", "Manual", "Fixer.io")

  @@unique([fromCurrency, toCurrency])
  @@map("exchange_rates")
}

// NEW ENUMS FOR SALES MANAGEMENT
enum ReturnStatus {
  NONE
  REQUESTED
  APPROVED
  PROCESSING
  COMPLETED
  REJECTED
}
