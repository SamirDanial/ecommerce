generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     Int              @id @default(autoincrement())
  name                   String           @db.VarChar(100)
  email                  String           @unique
  password               String
  role                   Role             @default(USER)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  avatar                 String?
  emailVerificationToken String?
  isEmailVerified        Boolean          @default(false)
  phone                  String?
  resetPasswordExpires   DateTime?
  resetPasswordToken     String?
  clerkId                String?          @unique
  stripeCustomerId       String?          @unique
  addresses              Address[]
  cartItems              CartItem[]
  orders                 Order[]
  paymentMethods         PaymentMethod[]
  questions              Question[]
  recentlyViewed         RecentlyViewed[]
  reviewReplies          ReviewReply[]
  reviews                Review[]
  reviewInteractions     ReviewInteraction[]
  preferences            UserPreferences?
  profile                UserProfile?
  sessions               UserSession[]
  wishlist               WishlistItem[]

  @@map("users")
}

model Address {
  id            Int         @id @default(autoincrement())
  userId        Int
  type          AddressType @default(SHIPPING)
  firstName     String      @db.VarChar(50)
  lastName      String      @db.VarChar(50)
  company       String?
  address1      String      @db.VarChar(200)
  address2      String?
  city          String      @db.VarChar(100)
  state         String      @db.VarChar(100)
  postalCode    String      @db.VarChar(20)
  country       String      @db.VarChar(100)
  phone         String      @db.VarChar(20)
  isDefault     Boolean     @default(false)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  billingOrders Order[]     @relation("BillingAddress")

  @@map("addresses")
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique @db.VarChar(100)
  slug        String    @unique @db.VarChar(100)
  description String?
  image       String?
  isActive    Boolean   @default(true)
  sortOrder   Int       @default(0)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id               Int              @id @default(autoincrement())
  name             String           @db.VarChar(200)
  description      String
  price            Decimal          @db.Decimal(10, 2)
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  barcode          String?          @unique @db.VarChar(100)
  categoryId       Int
  comparePrice     Decimal?         @db.Decimal(10, 2)
  costPrice        Decimal?         @db.Decimal(10, 2)
  dimensions       String?          @db.VarChar(100)
  isActive         Boolean          @default(true)
  isFeatured       Boolean          @default(false)
  isOnSale         Boolean          @default(false)
  metaDescription  String?
  metaTitle        String?          @db.VarChar(200)
  saleEndDate      DateTime?
  salePrice        Decimal?         @db.Decimal(10, 2)
  shortDescription String?          @db.VarChar(500)
  sku              String?          @unique @db.VarChar(100)
  slug             String           @unique @db.VarChar(200)
  tags             String[]         @default([])
  weight           Decimal?         @db.Decimal(8, 2)
  cartItems        CartItem[]
  orderItems       OrderItem[]
  images           ProductImage[]
  variants         ProductVariant[]
  category         Category         @relation(fields: [categoryId], references: [id])
  questions        Question[]
  recentlyViewed   RecentlyViewed[]
  reviews          Review[]
  wishlistItems    WishlistItem[]

  @@map("products")
}

model ProductVariant {
  id           Int         @id @default(autoincrement())
  productId    Int
  size         Size
  color        String      @db.VarChar(50)
  colorCode    String?     @db.VarChar(7)
  stock        Int         @default(0)
  sku          String?     @unique @db.VarChar(100)
  price        Decimal?    @db.Decimal(10, 2)
  comparePrice Decimal?    @db.Decimal(10, 2)
  isActive     Boolean     @default(true)
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  cartItems    CartItem[]
  orderItems   OrderItem[]
  product      Product     @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ProductImage {
  id        Int      @id @default(autoincrement())
  productId Int
  url       String   @db.VarChar(500)
  alt       String?  @db.VarChar(200)
  sortOrder Int      @default(0)
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_images")
}

model CartItem {
  id        Int             @id @default(autoincrement())
  userId    Int
  productId Int
  variantId Int?
  quantity  Int             @default(1)
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  variant   ProductVariant? @relation(fields: [variantId], references: [id])

  @@unique([userId, productId, variantId])
  @@map("cart_items")
}

model WishlistItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlist_items")
}

model Order {
  id                 Int            @id @default(autoincrement())
  orderNumber        String         @unique @db.VarChar(50)
  userId             Int
  status             OrderStatus    @default(PENDING)
  subtotal           Decimal        @db.Decimal(10, 2)
  tax                Decimal        @default(0) @db.Decimal(10, 2)
  shipping           Decimal        @default(0) @db.Decimal(10, 2)
  discount           Decimal        @default(0) @db.Decimal(10, 2)
  total              Decimal        @db.Decimal(10, 2)
  currency           Currency       @default(USD)
  language           Language       @default(ENGLISH)
  notes              String?
  billingAddressId   Int?
  paymentStatus      PaymentStatus  @default(PENDING)
  trackingNumber     String?        @db.VarChar(100)
  shippedAt          DateTime?
  deliveredAt        DateTime?
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt
  paymentMethodId    Int?
  shippingAddress1   String?        @db.VarChar(200)
  shippingAddress2   String?        @db.VarChar(200)
  shippingCity       String?        @db.VarChar(100)
  shippingCompany    String?        @db.VarChar(100)
  shippingCountry    String?        @db.VarChar(100)
  shippingFirstName  String?        @db.VarChar(100)
  shippingLastName   String?        @db.VarChar(100)
  shippingPhone      String?        @db.VarChar(50)
  shippingPostalCode String?        @db.VarChar(20)
  shippingState      String?        @db.VarChar(100)
  currentStatus      OrderStatus    @default(PENDING)
  estimatedDelivery  DateTime?
  lastStatusUpdate   DateTime       @default(now())
  statusHistory      Json?
  items              OrderItem[]
  billingAddress     Address?       @relation("BillingAddress", fields: [billingAddressId], references: [id])
  paymentMethod      PaymentMethod? @relation(fields: [paymentMethodId], references: [id])
  user               User           @relation(fields: [userId], references: [id])
  payments           Payment[]

  @@map("orders")
}

model OrderItem {
  id          Int             @id @default(autoincrement())
  orderId     Int
  productId   Int
  variantId   Int?
  productName String          @db.VarChar(200)
  productSku  String?         @db.VarChar(100)
  size        Size?
  color       String?         @db.VarChar(50)
  quantity    Int
  price       Decimal         @db.Decimal(10, 2)
  total       Decimal         @db.Decimal(10, 2)
  createdAt   DateTime        @default(now())
  order       Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product         @relation(fields: [productId], references: [id])
  variant     ProductVariant? @relation(fields: [variantId], references: [id])

  @@map("order_items")
}

model Payment {
  id              Int               @id @default(autoincrement())
  orderId         Int
  amount          Decimal           @db.Decimal(10, 2)
  currency        Currency          @default(USD)
  status          PaymentStatus     @default(PENDING)
  transactionId   String?           @db.VarChar(200)
  gatewayResponse String?
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  method          PaymentMethodType @default(CREDIT_CARD)
  order           Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model Review {
  id           Int                   @id @default(autoincrement())
  userId       Int
  productId    Int
  rating       Int
  title        String?
  comment      String?
  isVerified   Boolean               @default(false)
  isActive     Boolean               @default(true)
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  status       ReviewStatus          @default(PENDING)
  replies      ReviewReply[]
  interactions ReviewInteraction[]
  product      Product               @relation(fields: [productId], references: [id], onDelete: Cascade)
  user         User                  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

model ReviewReply {
  id        Int      @id @default(autoincrement())
  reviewId  Int
  userId    Int
  reply     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review    Review   @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("review_replies")
}

model ReviewInteraction {
  id        Int                @id @default(autoincrement())
  reviewId  Int
  userId    Int
  type      InteractionType
  reason    String?            @db.Text  // Store report reason
  createdAt DateTime           @default(now())
  review    Review             @relation(fields: [reviewId], references: [id], onDelete: Cascade)
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([reviewId, userId, type])
  @@map("review_interactions")
}

model Question {
  id        Int            @id @default(autoincrement())
  userId    Int
  productId Int
  question  String         @db.VarChar(500)
  answer    String?
  status    QuestionStatus @default(PENDING)
  isActive  Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model DiscountCode {
  id          Int          @id @default(autoincrement())
  code        String       @unique @db.VarChar(50)
  type        DiscountType @default(PERCENTAGE)
  value       Decimal      @db.Decimal(10, 2)
  minAmount   Decimal?     @db.Decimal(10, 2)
  maxDiscount Decimal?     @db.Decimal(10, 2)
  usageLimit  Int?
  usedCount   Int          @default(0)
  isActive    Boolean      @default(true)
  startsAt    DateTime     @default(now())
  expiresAt   DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("discount_codes")
}

model RecentlyViewed {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  viewedAt  DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("recently_viewed")
}

model FlashSale {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(200)
  description        String?
  discountPercentage Int      @default(0)
  startDate          DateTime @default(now())
  endDate            DateTime
  isActive           Boolean  @default(true)
  isFeatured         Boolean  @default(false)
  bannerColor        String?  @db.VarChar(7)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("flash_sales")
}

model UserProfile {
  id          Int       @id @default(autoincrement())
  userId      Int       @unique
  firstName   String?   @db.VarChar(50)
  lastName    String?   @db.VarChar(50)
  dateOfBirth DateTime?
  gender      String?   @db.VarChar(20)
  bio         String?
  website     String?   @db.VarChar(200)
  socialLinks Json?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model UserPreferences {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  language           Language @default(ENGLISH)
  currency           Currency @default(USD)
  timezone           String?  @db.VarChar(50)
  emailNotifications Boolean  @default(true)
  smsNotifications   Boolean  @default(false)
  marketingEmails    Boolean  @default(true)
  orderUpdates       Boolean  @default(true)
  promotionalOffers  Boolean  @default(true)
  newsletter         Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_preferences")
}

model PaymentMethod {
  id             Int               @id @default(autoincrement())
  userId         Int
  type           PaymentMethodType @default(CREDIT_CARD)
  provider       String            @db.VarChar(50)
  accountNumber  String?           @db.VarChar(50)
  expiryMonth    Int?
  expiryYear     Int?
  cardholderName String?           @db.VarChar(100)
  isDefault      Boolean           @default(false)
  isActive       Boolean           @default(true)
  metadata       Json?
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  orders         Order[]
  user           User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model UserSession {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique @db.VarChar(255)
  deviceInfo   String?  @db.VarChar(200)
  ipAddress    String?  @db.VarChar(45)
  userAgent    String?
  isActive     Boolean  @default(true)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

enum Role {
  USER
  ADMIN
}

enum AddressType {
  SHIPPING
  BILLING
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentStatus {
  PENDING
  PAID
  FAILED
  REFUNDED
  PARTIALLY_REFUNDED
}

enum PaymentMethodType {
  CREDIT_CARD
  DEBIT_CARD
  PAYPAL
  APPLE_PAY
  GOOGLE_PAY
  BANK_TRANSFER
  CRYPTO
}

enum Currency {
  USD
  EUR
  PKR
}

enum Language {
  ENGLISH
  URDU
  ARABIC
}

enum DiscountType {
  PERCENTAGE
  FIXED_AMOUNT
}

enum ReviewStatus {
  PENDING
  APPROVED
  REJECTED
}

enum QuestionStatus {
  PENDING
  APPROVED
  REJECTED
  ANSWERED
}

enum InteractionType {
  HELPFUL
  REPORT
}
